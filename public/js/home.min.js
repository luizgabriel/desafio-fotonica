(function() {
  this.Calculator = (function() {
    function Calculator() {}

    Calculator.prototype.calculate = function(opcode, operand1, operand2) {
      operand1 = parseFloat(operand1);
      operand2 = parseFloat(operand2);
      if (opcode === '+') {
        return this.sum(operand1, operand2);
      } else if (opcode === '-') {
        return this.sub(operand1, operand2);
      } else if (opcode === '*') {
        return this.mul(operand1, operand2);
      } else if (opcode === '/') {
        return this.div(operand1, operand2);
      }
    };

    Calculator.prototype.sum = function(operand1, operand2) {
      return operand1 + operand2;
    };

    Calculator.prototype.sub = function(operand1, operand2) {
      return operand1 - operand2;
    };

    Calculator.prototype.mul = function(operand1, operand2) {
      return operand1 * operand2;
    };

    Calculator.prototype.div = function(operand1, operand2) {
      return operand1 / operand2;
    };

    return Calculator;

  })();

}).call(this);

(function() {
  var appendCalculatorOut, calculator, calculator_out, channel, consoleClear, consoleOut, incrementTotal, number_out, operand1, operation, processAction, pusher, sync, toogle_btn, total;

  calculator_out = $('.calculator-output');

  calculator = new Calculator();

  operand1 = 0;

  operation = '+';

  appendCalculatorOut = function(char) {
    var current, firstChar, hasDot;
    current = calculator_out.html();
    firstChar = current[0];
    hasDot = current.indexOf('.') >= 0;
    if (firstChar === '0' && !hasDot && char !== '.') {
      return calculator_out.html(current.slice(0, -1) + char);
    } else if (!(hasDot && char === '.')) {
      return calculator_out.append(char);
    }
  };

  processAction = function(opcode) {
    var current;
    current = calculator_out.html();
    if (!isNaN(parseInt(opcode))) {
      return appendCalculatorOut(opcode);
    } else if (opcode === '.') {
      return appendCalculatorOut(opcode);
    } else if (opcode === 'backspace') {
      if (current.length === 1) {
        return calculator_out.html(0);
      } else {
        return calculator_out.html(current.slice(0, -1));
      }
    } else if (opcode === 'clear') {
      return calculator_out.html("0");
    } else if (opcode === '=') {
      calculator_out.html(calculator.calculate(operation, operand1, current));
      return console.log(operand1, operation, parseFloat(current), '=', parseFloat(calculator_out.html()));
    } else {
      operation = opcode;
      operand1 = parseFloat(current);
      return processAction('clear');
    }
  };

  $('.calculator .btn').click(function() {
    var opcode;
    opcode = $(this).html();
    if (($(this).data('action') != null)) {
      opcode = $(this).data('action');
    }
    return processAction(opcode);
  });

  toogle_btn = $('#toogle-random-generator');

  number_out = $('#random-output');

  sync = false;

  toogle_btn.change(function() {
    var status;
    status = $(this).prop('checked') ? 1 : 0;
    $.post('/api/server/1', {
      _method: 'put',
      _token: TOKEN,
      number_generator_status: status
    }).done(function(config) {
      if (config.number_generator_status === 1) {
        return consoleOut('O serviço foi iniciado.');
      } else if (config.number_generator_status === 0) {
        return consoleOut('O serviço foi parado.');
      } else {
        return console.log(config);
      }
    });
    if (status === 1) {
      return consoleOut('Iniciando o serviço...');
    } else if (status === 0) {
      return consoleOut('Parando o serviço...');
    }
  });

  consoleClear = function() {
    return number_out.html("");
  };

  consoleOut = function(message) {
    number_out.find('li').removeClass('current');
    return number_out.append("<li class=\"current\">" + message + "</li>");
  };

  total = $('#total');

  incrementTotal = function() {
    var current;
    current = parseInt(total.html());
    return total.html(current + 1);
  };

  pusher = new Pusher('dc62f2019de851ad9f1b', {
    encrypted: true
  });

  channel = pusher.subscribe('number.create');

  channel.bind('Fotonica\\Events\\CreateNumberEvent', function(data) {
    var date;
    if (!sync) {
      sync = true;
      consoleClear();
      consoleOut('Sincronizado!');
    }
    date = new Date().toLocaleDateString("pt-BR", {
      hour12: false,
      hour: "numeric",
      minute: "numeric"
    });
    incrementTotal();
    return consoleOut("Número gerado: " + data.number.value + " | em " + date);
  });

}).call(this);

//# sourceMappingURL=home.min.js.map
